pipeline {
    stage('Get Org Members') {
        try {
            Map args = [
                'region_name': params.AWS_REGIONS,
                'action': 'get_all_accounts'
            ]
            
            def accounts = [
                [account_id: "089032071"],
                [account_id: "559178170", name: "a AU External Lift & Shift Prod 01"],
                [account_id: "122418909", name: "a AU External Lift & Shift Stage 01"],
                [account_id: "122036671", name: "a AU External Management"],
                [account_id: "065438249", name: "a AU External Shared"],
                [account_id: "442639326", name: "a EU External Centralized Logging"],
                [account_id: "567229913", name: "a Global External Identity"],
                [account_id: "989595550", name: "a Global External IT Security"],
                [account_id: "920930147", name: "a Global Internal Identity"],
                [account_id: "695609289", name: "a Global Internal IT Security"],
                [account_id: "362320144", name: "a JP External Centralized Logging"],
                [account_id: "302437263", name: "a JP External Lift & Shift Prod 01"],
                [account_id: "415730055", name: "a JP External Lift & Shift Stage 01"],
                [account_id: "310642835", name: "a JP External Management"],
                [account_id: "044896982", name: "a JP External Microservices"],
                [account_id: "441937114", name: "a JP External Shared"],
                [account_id: "985648966", name: "a Transit"],
                [account_id: "852241258", name: "a UK External Centralized Logging"],
                [account_id: "017927682", name: "a US Corporate Micro Dev"],
                [account_id: "757485090", name: "a US Corporate Micro Mgt"],
                [account_id: "125731216", name: "a US Corporate Micro Prod"],
                [account_id: "016684914", name: "a US Internal Lift & Shift Dev 01"],
                [account_id: "822120504", name: "SABAAWSSYDDR"],
                [account_id: "757008294", name: "SABAWSSYDLOG"],
                [account_id: "335758605", name: "CSABAAWSSYDPRODHOSTING"]
            ]  
            int batchSize = 7
            List<List<String>> accountBatches = accounts.collect { it.account_id }.collate(batchSize)

            Map executionPlan1 = [:]
            
            accountBatches.eachWithIndex { accountBatch, index ->
                def batchName = "Batch ${index+1}"
                
                if (index == accountBatches.size() - 1 && accountBatch.size() < batchSize) {
                    // Handle the last batch separately
                    executionPlan1["Enabling security standards for ${batchName}"] = {
                      log.info("Starting batch ${batchName}")
                      def parallelExecution = [:]
                      parallelExecution[batchName] = {                        
                            accountBatch.each { accountId ->
                               parallel("${accountId}") { try {
                                    if (accountId == "123972418909" || accountId == "822194620504" ) {
                            throw new RuntimeException("Intentional error for account ${accountId}")
                        }                        
                                    log.info("Processing account ${accountId} in ${batchName}...")}
                                catch(Exception e) {
                                    log.error("Error occurred: ${e}")
                                    
                                }}}
                                 } 
                       
                                         
                            
                     log.info("Completed  batch ${batchName}")
                    }
                } else {
                    // Handle all other batches
                    executionPlan1["Enabling security standards for ${batchName}"] = {
                     log.info("Starting batch ${batchName}")
                     def parallelExecution = [:]
                     parallelExecution[batchName] = { 
                        accountBatch.each { accountId ->  
                            parallel("${accountId}") { try {
    
                                log.info("Processing account ${accountId} in ${batchName}...")
                                        }
                            catch(Exception e) {
                                log.error("Error occurred: ${e}")
                                
                            } }}
                                } 
                       
                    // lock('batch_deployment_lock') 
                     log.info("Completed  batch ${batchName}")   
                    }
                }
            }

            executionPlan1.each { k, v -> v() }
        } catch(Exception e) {
            log.error("Error occurred: ${e}")
            throw e
        }
    }
}